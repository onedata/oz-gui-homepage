{
  "swagger": "2.0",
  "basePath": "/api/v3/luma",
  "info": {
    "version": "17.06.0-rc6",
    "title": "LUMA",
    "description": "LUMA (Local User MApping) is a REST server that exposes simple REST API that\ncan be used to map users (of any system/kind) to storage specific user\ncredentials (e.g. UID/GID, usernames and passwords or certificates), in the\nprocess authorizing them with the storage.\n\nThis is a specification of LUMA interface, which is understood by\nOneprovider, and for each storage it is best to implement a specific LUMA\nimplementation.\n\nA stub implementation can be generated automatically from this specification\nusing [Swagger Codegen](https://github.com/swagger-api/swagger-codegen)\ntool in mulitple programming frameworks.\n\nLUMA provides a 2-way mapping interface allowing to:\n * Get user credentials for specific storage based on user federated Id\n * Get user federated Id (in specific IdP) based on storage credentials\n\nAdditionally, LUMA allows for mapping between user groups on a federated (IdP)\nlevel and storage, independently of any specific user.\n\nLUMA supports the same storage systems which are supported by Oneprovider,\nand for each of them a specific must be implemented as typically different\nstorage systems require different types of credentials.\n\nAs of now there are the following supported storage systems, each with it's\nown type of credentials:\n * Posix\n * Ceph\n * Amazon S3\n * Openstack Swift\n * GlusterFS\n\nMore information: [https://github.com/onedata/luma](https://github.com/onedata/luma)\n",
    "contact": {
      "name": "Onedata support",
      "url": "https://onedata.org/support",
      "email": "info@onedata.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://onedata.org/assets/images/api/luma-logo.svg",
      "backgroundColor": "#FFFFFF"
    }
  },
  "paths": {
    "/map_user_credentials": {
      "post": {
        "summary": "Get user credentials",
        "description": "Returns user credentials to storage in JSON format.",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "user",
        "operationId": "map_user_credentials",
        "tags": [
          "Mapping"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details returned successfully.",
            "schema": {
              "$ref": "#/definitions/UserStorageCredentials"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User credentials not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "userCredentialsRequest",
            "description": "User credentials mapping request.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCredentialsRequest"
            },
            "required": true
          }
        ]
      }
    },
    "/resolve_user": {
      "post": {
        "summary": "Resolve user identity",
        "description": "Returns the user identity from storage credentials.",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "user",
        "operationId": "resolve_user_identity",
        "tags": [
          "Mapping"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User identity returned successfully.",
            "schema": {
              "$ref": "#/definitions/UserIdentity"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User credentials not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "userStorageCredentials",
            "description": "User storage credentials.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserStorageCredentials"
            },
            "required": true
          }
        ]
      }
    },
    "/resolve_group": {
      "post": {
        "summary": "Resolve group identity",
        "description": "Returns group identity based on storage specific group id.",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "user",
        "operationId": "resolve_group",
        "tags": [
          "Mapping"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Group identity returned successfully.",
            "schema": {
              "$ref": "#/definitions/GroupIdentity"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User credentials not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "groupDetails",
            "description": "Group mapping request.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GroupDetails"
            },
            "required": true
          }
        ]
      }
    },
    "/admin/users": {
      "post": {
        "summary": "Get user details",
        "description": "Add user details an return LUMA id.",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "user",
        "operationId": "post_user_details",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "ID of the created LUMA user in the form /admin/users/{lid} is returned in the response `Location` header.\n",
            "headers": {
              "Location": {
                "description": "ID of the LUMA user.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "userDetails",
            "description": "Add user details for mapping.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            },
            "required": true
          }
        ]
      }
    },
    "/admin/users/{lid}": {
      "get": {
        "summary": "Get user details",
        "description": "Returns user details known by LUMA.",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "user",
        "operationId": "get_user_details",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details returned successfully.",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User credentials not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "lid",
            "description": "LUMA user Id.",
            "type": "integer",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update user details",
        "description": "Allows to update user details, based on which credential mapping will be performed. Typically this operation can be left unimplemented, as the mapping logic can should use external, however for simple scenarios this interface can be used to configure the user storage credential mapping.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "user",
        "operationId": "update_user_details",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "User details added successfully."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "lid",
            "description": "LUMA user Id.",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "userDetails",
            "description": "Add user details for mapping.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "Deletes user details from LUMA database.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "group",
        "operationId": "delete_user",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "User details removed successfully."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "lid",
            "description": "LUMA user Id.",
            "type": "integer",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/admin/users/{lid}/credentials": {
      "put": {
        "summary": "Add user credentials",
        "description": "Adds user credentials to specific storage (optional).",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "user",
        "operationId": "add_user_credentials",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "User credentials added successfully."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User credentials not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "lid",
            "description": "LUMA user Id.",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "credentials",
            "description": "Add user credentials for specific storage.",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserStorageCredentials"
              }
            },
            "required": true
          }
        ]
      }
    },
    "/admin/{idp}/groups/{groupId}": {
      "get": {
        "summary": "Get group mapping",
        "description": "Returns group details known by LUMA.",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "group",
        "operationId": "get_group_mapping",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Group details returned successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupDetails"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group credentials not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "idp",
            "description": "Id of identity provider that was (or will be) used by subject user to log in into onezone, identical to id specified in auth.config / saml.config.\n",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "groupId",
            "description": "Id of a group as recognized by a specific identity provider.\n",
            "type": "string",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Add group mapping",
        "description": "Allows to add group mapping to LUMA.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "group",
        "operationId": "add_group_mapping",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Group mapping added successfully."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "idp",
            "description": "Id of identity provider that was (or will be) used by subject user to log in into onezone, identical to id specified in auth.config / saml.config.\n",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "groupId",
            "description": "Id of a group as recognized by a specific identity provider.\n",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "groupDetails",
            "description": "Add group details for mapping.",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupDetails"
              }
            },
            "required": true
          }
        ]
      },
      "delete": {
        "summary": "Delete group mapping",
        "description": "Allows to add group mapping to LUMA.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "luma",
        "x-onedata-resource": "group",
        "operationId": "delete_group_mapping",
        "tags": [
          "Admin"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Group details removed successfully."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "idp",
            "description": "Id of identity provider that was (or will be) used by subject user to log in into onezone, identical to id specified in auth.config / saml.config.\n",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "groupId",
            "description": "Id of a group as recognized by a specific identity provider.\n",
            "type": "string",
            "in": "path",
            "required": true
          }
        ]
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "description": "Generic error model for REST requests.",
      "properties": {
        "error": {
          "description": "Identifier representing internal error code.",
          "type": "string"
        },
        "errorDescription": {
          "description": "Detailed error message.",
          "type": "string"
        }
      },
      "required": [
        "error",
        "errorDescription"
      ],
      "example": {
        "error": "invalid_user",
        "errorDescription": "Invalid user ID."
      }
    },
    "UserCredentialsRequest": {
      "type": "object",
      "description": "User credentials request - provides all necessary information to perform the account mapping.\n",
      "properties": {
        "storageId": {
          "description": "Storage ID (site specific).\n",
          "type": "string"
        },
        "userDetails": {
          "$ref": "#/definitions/UserDetails"
        }
      },
      "required": [
        "storageId",
        "userDetails"
      ],
      "example": {
        "storageId": "AKSDHKAJSHD898798ASDKJHA89878ASD",
        "userDetails": {
          "id": "ASDJASDNNALSDNALSDNALSDLASD",
          "name": "User One",
          "connectedAccounts": [
            {
              "idp": "github",
              "userId": "ASDJH65675ASD765ASD890ASD6",
              "login": "user1",
              "name": "User One",
              "emailList": [
                "user.1@example.com",
                "user.one@example.com",
                "user.i@example.com"
              ],
              "groups": [
                "vo:example-org.eu/tm:members/member",
                "vo:example-org.eu/rl:administration/admin"
              ]
            }
          ],
          "login": "user.one",
          "emailList": [
            "user.1@example2.com",
            "user.one@example2.com",
            "user.i@example2.com"
          ]
        }
      }
    },
    "ConnectedAccount": {
      "type": "object",
      "description": "User connected account.",
      "properties": {
        "idp": {
          "type": "string",
          "description": "ID of the identity provider."
        },
        "userId": {
          "type": "string",
          "description": "User ID assigned in Onezone."
        },
        "login": {
          "type": "string",
          "description": "User login name."
        },
        "name": {
          "type": "string",
          "description": "User full name."
        },
        "emailList": {
          "type": "array",
          "description": "The list of user email accounts.",
          "items": {
            "type": "string"
          }
        },
        "groups": {
          "type": "array",
          "description": "A list of strings denoting user group memberships as acquired from the\nidentity provider. Memberships are in Onedata normalized form.\n",
          "items": {
            "type": "string"
          }
        },
        "custom": {
          "type": "object",
          "description": "This field stores all additional properties that were provided by the IdP for this user.\n",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "idp",
        "userId"
      ],
      "example": {
        "idp": "github",
        "userId": "ASDJH65675ASD765ASD890ASD6",
        "login": "user1",
        "name": "User One",
        "emailList": [
          "user.1@example.com",
          "user.one@example.com",
          "user.i@example.com"
        ],
        "groups": [
          "vo:example-org.eu/tm:members/member",
          "vo:example-org.eu/rl:administration/admin"
        ],
        "custom": [
          {
            "eduPersonPrincipalName": "user.1@example.com"
          },
          {
            "userCertificateSubject": "\t/C=PL/O=GRID/O=ACME/CN=User One"
          }
        ]
      }
    },
    "UserDetails": {
      "type": "object",
      "description": "User details needed for user mapping.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Onedata user ID."
        },
        "name": {
          "type": "string",
          "description": "User name."
        },
        "connectedAccounts": {
          "type": "array",
          "description": "The list of user Open ID accounts.",
          "items": {
            "$ref": "#/definitions/ConnectedAccount"
          }
        },
        "login": {
          "type": "string",
          "description": "User login."
        },
        "emailList": {
          "type": "array",
          "description": "The list of user email accounts.",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "id": "9743a66f914cc249efca164485a19c5c",
        "name": "user1",
        "connectedAccounts": [
          {
            "idp": "github",
            "userId": "5c28904a-124a-4035-853c-36938143dd4e",
            "login": "user1",
            "name": "User One",
            "emailList": [
              "user.1@example.com",
              "user.one@example.com",
              "user.i@example.com"
            ]
          },
          {
            "idp": "EGI",
            "userId": "john@example.com",
            "login": "user1",
            "name": "User One",
            "custom": {
              "userCertificateSubject": "/C=PL/O=GRID/O=ACME/CN=John Doe",
              "eduPersonPrincipalName": "john@example.com"
            },
            "emailList": [
              "user.1@example.com"
            ]
          }
        ],
        "login": "user.one",
        "emailList": [
          "user.1@example2.com",
          "user.one@example2.com",
          "user.i@example2.com"
        ]
      }
    },
    "UserIdentity": {
      "type": "object",
      "description": "User identity.",
      "properties": {
        "idp": {
          "type": "string",
          "description": "Id of identity provider that was (or will be) used by subject user to log in\ninto onezone, identical to id specified in auth.config / saml.config.\nIf the user was created via onepanel, use the value \"onezone\".\n"
        },
        "userId": {
          "type": "string",
          "description": "Id of user as recognized by the identity provider. If the user was created\nvia onepanel, use the userId from onepanel (can be checked using REST).\n"
        }
      },
      "example": {
        "idp": "google",
        "userId": "5484af38-8b5d-464f-bdd1-da9ef801090f"
      }
    },
    "UserStorageCredentials": {
      "type": "object",
      "description": "Generic storage credentials response type.",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of storage.",
          "enum": [
            "posix",
            "ceph",
            "s3",
            "swift",
            "glusterfs"
          ]
        },
        "id": {
          "type": "string",
          "description": "Storage Id."
        }
      },
      "required": [
        "type",
        "id"
      ]
    },
    "GroupDetails": {
      "type": "object",
      "description": "Group identity. At least one of `gid` and `name` properties are required.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "Storage ID (site specific).\n"
        },
        "gid": {
          "type": "string",
          "description": "Type of storage.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the group.\n"
        }
      },
      "required": [
        "id"
      ],
      "example": {
        "id": "Assdwe897Dsdjhx9",
        "gid": "1001",
        "name": "users"
      }
    },
    "GroupIdentity": {
      "type": "object",
      "description": "Group identity.",
      "properties": {
        "idp": {
          "type": "string",
          "description": "Id of identity provider that was (or will be) used by subject user to log in into onezone, identical to id specified in auth.config / saml.config.\n"
        },
        "groupId": {
          "type": "string",
          "description": "Id of a group as recognized by a specific identity provider.\n"
        }
      },
      "example": {
        "idp": "github",
        "groupId": "5484af38-8b5d-464f-bdd1-da9ef801090f"
      }
    },
    "posix": {
      "allOf": [
        {
          "$ref": "#/definitions/UserStorageCredentials"
        },
        {
          "type": "object",
          "description": "The POSIX storage credentials. The credentials support both basic POSIX identity (i.e. numeric uid/gid properties) as well as named identity for POSIX or NFSv4 ACL's. Depending on the type of storage either uid/gid or username groupname pair can be included. When requesting user identity based on storage credentials, only single field can be included here (e.g. username) for which federated user identity should be returned.\n",
          "properties": {
            "uid": {
              "type": "string",
              "description": "POSIX user ID in the local system."
            },
            "gid": {
              "type": "string",
              "description": "POSIX user group ID in the local system."
            },
            "name": {
              "type": "string",
              "description": "Username for POSIX compatible ACL's."
            }
          }
        }
      ],
      "example": {
        "uid": 3121,
        "gid": 123
      }
    },
    "s3": {
      "allOf": [
        {
          "$ref": "#/definitions/UserStorageCredentials"
        },
        {
          "type": "object",
          "description": "The Amazon S3 storage credentials.",
          "properties": {
            "accessKey": {
              "type": "string",
              "description": "S3 access key for user."
            },
            "secretKey": {
              "type": "string",
              "description": "S3 secret key for user."
            }
          },
          "required": [
            "accessKey",
            "secretKey"
          ]
        }
      ],
      "example": {
        "accessKey": "J7657576ASDFKJAHSDASDASDJHVASDLKJAHSDLK",
        "secretKey": "ASDASDJHVASDLKJAHSDLKJ7657576ASDFKJAHSD"
      }
    },
    "ceph": {
      "allOf": [
        {
          "$ref": "#/definitions/UserStorageCredentials"
        },
        {
          "type": "object",
          "description": "The Ceph storage credentials.",
          "properties": {
            "username": {
              "type": "string",
              "description": "Ceph user name."
            },
            "key": {
              "type": "string",
              "description": "Ceph user key."
            }
          },
          "required": [
            "username",
            "key"
          ]
        }
      ],
      "example": {
        "username": "user1",
        "key": "LKAJHFLKJHASD9879ASDASDBNASD"
      }
    },
    "swift": {
      "allOf": [
        {
          "$ref": "#/definitions/UserStorageCredentials"
        },
        {
          "type": "object",
          "description": "The OpenStack Keystone credentials.",
          "properties": {
            "username": {
              "type": "string",
              "description": "OpenStack Keystone user name."
            },
            "password": {
              "type": "string",
              "description": "OpenStack Keystone user password."
            }
          },
          "required": [
            "username",
            "password"
          ]
        }
      ],
      "example": {
        "username": "user1",
        "password": "P@$$W0RD"
      }
    },
    "glusterfs": {
      "allOf": [
        {
          "$ref": "#/definitions/UserStorageCredentials"
        },
        {
          "type": "object",
          "description": "The GlusterFS storage credentials. For non-TLS connection, `uid` and `gid` properties are sufficient. However, for fully secure connection each user must be also identified by a certificate, which must be returned in this response.\n",
          "properties": {
            "uid": {
              "type": "string",
              "description": "POSIX user ID in the GlusterFS server."
            },
            "gid": {
              "type": "string",
              "description": "POSIX user group ID in the GlusterFS server."
            },
            "certificate": {
              "type": "string",
              "description": "User certificate in PEM format. The value must be formatted properly (including newlines) in PEM format.\n"
            },
            "key": {
              "type": "string",
              "description": "User private key for certificate in PEM format."
            },
            "caCertificate": {
              "type": "string",
              "description": "The certificate of the CA signing the user certificate. Must include the entire necessary chain of trust, and the GlusterFS server must trust this CA.\n"
            }
          },
          "required": [
            "uid",
            "gid"
          ]
        }
      ],
      "example": {
        "uid": 1001,
        "gid": 1001,
        "certificate": "-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df\nBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx\naWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT\nJjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04\nC3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu\nB7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb\nvA==\n-----END CERTIFICATE-----\n",
        "key": "-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDg\nMBQGCCqGSIb3DQMHBAgD1kGN4ZslJgSCBMi1xk9jhlPxPc\n9g73NQbtqZwI+9X5OhpSg/2ALxlCCjbqvzgSu8gfFZ4yo+\nX0R+meOaudPTBxoSgCCM51poFgaqt4l6VlTN4FRpj+c/Wc\nblK948UAda/bWVmZjXfY4Tztah0CuqlAldOQBzu8TwE7WD\nH0ga/iLNvWYexG7FHLRiq5hTj0g9mUPEbeTXuPtOkTEb/0\nGEs=\n-----END ENCRYPTED PRIVATE KEY-----\n",
        "caCertificate": "-----BEGIN CERTIFICATE-----\nJjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04\nMIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df\nBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx\nC3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu\naWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT\nB7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb\nvA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df\nJjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04\nBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx\nC3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu\naWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT\nB7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb\nvA==\n-----END CERTIFICATE-----\n"
      }
    }
  },
  "tags": [
    {
      "name": "Mapping",
      "description": "User and group mapping"
    },
    {
      "name": "Admin",
      "description": "LUMA management endpoint"
    }
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  }
}
