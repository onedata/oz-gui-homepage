{
  "swagger": "2.0",
  "basePath": "/api/v3/onepanel",
  "info": {
    "version": "3.0.0-rc9",
    "title": "Onepanel",
    "description": "This is the RESTful API definition of **Onepanel** component of Onedata data management system [onedata.org](http://www.onedata.org).\n\n> This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate\n> client libraries - [swagger.json](../../../swagger/onepanel/swagger.json).\n\nThis API allows control and configuration of local Onedata deployment, in particular full control over the **Onezone** and **Oneprovider** services and their distribution and monitoring on the local resources. \n\nEach of these components is composed of the following services:\n  * **Worker services** - these are available under `/zone/workers` and `/provider/workers` paths,\n  * **Databases services** - each Onedata component stores it's metadata in a Couchbase backend, which can be distributed on any number of nodes, these are available under `/zone/databases` and `/provider/databases` paths,\n  * **Cluster manager services** - this is a service which controls other deployed processes in one site, these are availables under these are available under `/zone/managers` and `/provider/managers` paths.\n\n**Onezone** and **Oneprovider** components are composed of 3 types of services: **managers**, **databases** and **workers**. \n\nUsing this API each of these components can be deployed, configured, started and stopped on \na specified host in the local site, in the context of either **Onezone** or **Oneprovider** service. \n\nAll paths listed in this documentation are relative to the base Onepanel REST API which is `/api/v3/onepanel`, \nso complete URL for a request to Onepanel service is:\n\n```\nhttp://HOSTNAME:PORT/api/v3/onepanel/...\n```\n\n## Authentication\nOnepanel supports only HTTP basic authentication, i.e. using `username` and `password`, which were set when creating users.\n\nOnepanel users can have 2 roles:\n  * **admin** - Onepanel administrator, there can be multiple administrators and all have equal rights in terms of Onedata deployment management,\n  * **regular** - this role allows manual creation of user accounts, using which users can login to Onezone service using HTTP Basic authentication without OpenID. This role makes sense only on Onepanel which manages Onezone deployment.\n\nThe first user account which is created in Onepanel is always an `admin` account.\n\n## API structure\nThe Onepanel API is structured to reflect that it can either be used to control **Onezone**\nor **Oneprovider** deployment, each Onedata component deployment has a separate Onepanel \ninstance. In order to make the API calls explicit, **Onezone** or **Oneprovider** specific\nrequests have different paths, i.e.:\n  * Onezone specific operations start with `/api/v3/onepanel/zone/`\n  * Oneprovider specific operations start with `/api/v3/onepanel/provider/`\n  * Common operations paths include `/api/v3/onepanel/users`, `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`\n\nThe overall configuration of each component can be controlled by updating `/api/v3/onepanel/zone/configuration` and\n`/api/v3/onepanel/provider/configuration` resources.\n\n## Examples \nBelow are some example requests to Onepanel using cURL:\n  \n**Create new user**\n```bash\ncurl -X POST -k -vvv -H \"content-type: application/json\" \\\n-d '{\"username\": \"admin\", \"password\": \"Password1\", \"userRole\": \"admin\"}' \\\nhttps://172.17.0.6:9443/api/v3/onepanel/users\n```\n\n**Add storage resource to provider**\n```bash\ncurl -X PUT -u admin:Password1 -k -vvv -H \"content-type: application/json\" \\\n-d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\\nhttps://172.17.0.4:9443/api/v3/onepanel/provider/storages \n```\n\n**Add a new Onezone worker**\n```bash\ncurl -X PUT -u admin:Password1 -k -vvv -H \"content-type: application/json\" \\\n-d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\\nhttps://172.17.0.4:9443/api/v3/onepanel/zone/workers \n```\n",
    "contact": {
      "name": "Onedata support",
      "url": "https://onedata.org/support",
      "email": "info@onedata.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "/assets/images/api/onepanel-logo.svg",
      "backgroundColor": "#FFFFFF"
    }
  },
  "paths": {
    "/users": {
      "post": {
        "operationId": "post_users",
        "summary": "Create user",
        "description": "Creates a Onepanel user account.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel_user",
        "x-onedata-resource": "users",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The user account has been successfully created."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "userCreateRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCreateRequest"
            },
            "required": true
          }
        ]
      }
    },
    "/users/{username}": {
      "get": {
        "operationId": "get_users_username",
        "summary": "Get user details",
        "description": "Returns the configuration information of the Onepanel user.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel_user",
        "x-onedata-resource": "user",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The configuration information of the user.",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "The user does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name of a user whose details should be returned.",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_users_username",
        "summary": "Modify user details",
        "description": "Modifies the Onepanel user password.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel_user",
        "x-onedata-resource": "user",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The user password has been successfully changed."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "The user does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The user name.",
            "type": "string",
            "required": true
          },
          {
            "name": "userModifyRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserModifyRequest"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "operationId": "delete_users_username",
        "summary": "Remove user",
        "description": "Removes the Onepanel user account.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel_user",
        "x-onedata-resource": "user",
        "tags": [
          "Onepanel"
        ],
        "responses": {
          "204": {
            "description": "The user account has been successfully removed."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "User account not found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name of the user to be removed.",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/cookie": {
      "get": {
        "operationId": "get_cookie",
        "summary": "Get cluster cookie",
        "description": "Returns cookie of a cluster this host belongs to. The cookie is a character sequence that is common for all the cluster nodes.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "cookie",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The cookie of a cluster this host belongs to.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hosts": {
      "get": {
        "operationId": "get_hosts",
        "summary": "Get cluster/discovered hosts",
        "description": "Returns the list of administrative cluster hosts. It is also possible to\nreturn the list of hosts that have been discovered using multicast \nadvertisment.\n\nIn order to retrive discovered hosts set the `discovered` query string to\n`true`. This request can be executed unauthorized as long as there are\nno admin users.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "hosts",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The list of administrative cluster hosts.",
            "schema": {
              "type": "array",
              "description": "List of cluster or discovered hosts.",
              "items": {
                "type": "string"
              }
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "discovered",
            "in": "query",
            "description": "Defines whether return cluster or discovered hosts.",
            "type": "boolean",
            "default": false,
            "required": false
          }
        ]
      },
      "post": {
        "operationId": "post_hosts",
        "summary": "Create or join cluster",
        "description": "Initializes administrative cluster or if `clusterHost` parameter has been\nprovided in the query string adds this host to an existing cluster.\n\nIn both cases the host handling this request has to be newly started or\nremoved from previous cluster. It cannot contain any configuration data.\n\nThis request can be executed unauthorized as long as there are no admin users.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "hosts",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Cluster has been successfully initialized or extended."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterHost",
            "in": "query",
            "description": "Hostname of an existing cluster node.",
            "type": "string",
            "required": false
          },
          {
            "name": "cookie",
            "in": "body",
            "schema": {
              "type": "object",
              "description": "The cookie is a character sequence that is common for all the cluster nodes. If this parameter is not provided, in case of a cluster initialization request, it will be generated, and in case of a cluster extension request the current cookie value will be used. However, if the cluster cookie and the cookie of the host that is about to join the cluster doesn't match there will be a connection error.\n",
              "properties": {
                "cookie": {
                  "type": "string",
                  "x-onedata-datatype": "atom",
                  "description": "The cluster cookie."
                }
              }
            }
          }
        ]
      }
    },
    "/hosts/{host}": {
      "delete": {
        "operationId": "delete_hosts_host",
        "summary": "Remove cluster node",
        "description": "Removes a node from the administrative cluster. This operation removes all user and configuration data from the host. It also removes the host from each service cluster it belonged to.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "host",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Node has been successfully removed from the cluster."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Host not found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "in": "path",
            "type": "string",
            "description": "Hostname of a node to be removed from the cluster.",
            "required": true
          }
        ]
      }
    },
    "/tasks/{id}": {
      "get": {
        "operationId": "get_tasks_id",
        "summary": "Get task result",
        "description": "Returns result of an asynchronous operation, e.g. database service\nconfiguration.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "task",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The task result.",
            "schema": {
              "$ref": "#/definitions/TaskStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "The task does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The task ID.",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/provider": {
      "get": {
        "operationId": "get_provider",
        "summary": "Get provider details",
        "description": "Returns the basic configuration information of the provider.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The provider configuration details.",
            "schema": {
              "$ref": "#/definitions/ProviderDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "put_provider",
        "summary": "Register provider",
        "description": "Registers provider in the zone.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Provider has been successfully registered."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "providerRegisterRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProviderRegisterRequest"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_provider",
        "summary": "Modify provider details",
        "description": "Modifies basic provider details in the zone.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Provider details has been successfully modified."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "providerModifyRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProviderModifyRequest"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "operationId": "delete_provider",
        "summary": "Unregister provider",
        "description": "Unregisters provider from the zone.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Provider has been successfully unregistered."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/provider/configuration": {
      "get": {
        "operationId": "get_provider_configuration",
        "summary": "Get provider cluster configuration",
        "description": "Returns the provider cluster configuration.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oneprovider",
        "x-onedata-noauth": true,
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The provider cluster configuration.",
            "schema": {
              "$ref": "#/definitions/ProviderConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "put_provider_configuration",
        "summary": "Configure provider deployment",
        "description": "Configures and starts provider services, such as database, cluster manager\nand cluster worker. Depending on the configuration, sets up provider storage\nand registers in the zone.\n\nThis request can be executed unauthorized as long as there are no admin users.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oneprovider",
        "x-onedata-noauth": true,
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "providerConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProviderConfiguration"
            },
            "required": true
          }
        ]
      }
    },
    "/provider/spaces": {
      "get": {
        "operationId": "get_provider_spaces",
        "summary": "Get provider spaces",
        "description": "Returns the collection of spaces supported by a provider.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "spaces",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The provider spaces details.",
            "schema": {
              "$ref": "#/definitions/ProviderSpaces"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "put_provider_spaces",
        "summary": "Create or support space",
        "description": "Supports an existing space or creates a new space and automatically supports it.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "spaces",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The spaces has been successfully creates/supported.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the created/supported space resource."
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "spaceSupportRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpaceSupportRequest"
            },
            "required": true
          }
        ]
      }
    },
    "/provider/spaces/{id}": {
      "get": {
        "operationId": "get_provider_spaces_id",
        "summary": "Get space details",
        "description": "Returns space details.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The space details.",
            "schema": {
              "$ref": "#/definitions/SpaceDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Space does not exist or is not supported by the provider."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The ID of a space which details should be returned.",
            "required": true
          }
        ]
      },
      "delete": {
        "operationId": "delete_provider_spaces_id",
        "summary": "Revoke space support",
        "description": "Revokes support for a space.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The space support has been successfully revoked."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Space does not exist or is not supported by the provider."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The ID of a space to be removed.",
            "required": true
          }
        ]
      }
    },
    "/provider/storages": {
      "get": {
        "operationId": "get_provider_storages",
        "summary": "Get storages",
        "description": "Returns the list of provider storage resources and their details.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "storages",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The list of provider storage and their details.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClusterStorages"
              }
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "put_provider_storages",
        "summary": "Configure storage",
        "description": "Adds a storage to the provider deployment.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "storages",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The storage has been successfully added to the provider deployment."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterStoragesList",
            "in": "body",
            "description": "The list of configuration details of storages to be added to the provider deployment.\n",
            "schema": {
              "$ref": "#/definitions/ClusterStoragesList"
            },
            "required": true
          }
        ]
      }
    },
    "/provider/storages/{name}": {
      "get": {
        "operationId": "get_provider_storages_name",
        "summary": "Get storage details",
        "description": "Returns the details of the selected storage.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "storage",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The details of a selected storage",
            "schema": {
              "$ref": "#/definitions/ClusterStorages"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Storage does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "type": "string",
            "description": "The name of a storage resource, which details should be returned.\n",
            "required": true
          }
        ]
      }
    },
    "/provider/databases": {
      "get": {
        "operationId": "get_provider_databases",
        "summary": "Get provider databases status",
        "description": "Returns status of database service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "operationId": "put_provider_databases",
        "summary": "Deploy provider databases",
        "description": "Deploys a database service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceDatabases"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_provider_databases",
        "summary": "Start/stop provider databases",
        "description": "Starts or stops database service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/provider/databases/{host}": {
      "get": {
        "operationId": "get_provider_databases_host",
        "summary": "Get provider database status",
        "description": "Returns status of database service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_provider_databases_host",
        "summary": "Start/stop provider database",
        "description": "Starts or stops database service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/provider/managers": {
      "get": {
        "operationId": "get_provider_managers",
        "summary": "Get provider cluster managers status",
        "description": "Returns status of cluster manager service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "operationId": "put_provider_managers",
        "summary": "Deploy provider cluster managers",
        "description": "Deploys a cluster manager service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "managerHosts",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ManagerHosts"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_provider_managers",
        "summary": "Start/stop provider cluster managers",
        "description": "Starts or stops cluster manager service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/provider/managers/{host}": {
      "get": {
        "operationId": "get_provider_managers_host",
        "summary": "Get provider cluster manager status",
        "description": "Returns status of cluster manager service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_provider_managers_host",
        "summary": "Start/stop provider cluster manager",
        "description": "Starts or stops cluster manager service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/provider/workers": {
      "get": {
        "operationId": "get_provider_workers",
        "summary": "Get provider cluster workers status",
        "description": "Returns status of cluster worker service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "operationId": "put_provider_workers",
        "summary": "Deploy provider cluster workers",
        "description": "Deploys a cluster worker service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceHosts"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_provider_workers",
        "summary": "Start/stop provider cluster workers",
        "description": "Starts or stops cluster worker service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/provider/workers/{host}": {
      "get": {
        "operationId": "get_provider_workers_host",
        "summary": "Get provider cluster worker status",
        "description": "Returns status of cluster worker service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_provider_workers_host",
        "summary": "Start/stop provider cluster worker",
        "description": "Starts or stops cluster worker service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/zone/configuration": {
      "get": {
        "operationId": "get_zone_configuration",
        "summary": "Get zone cluster configuration",
        "description": "Returns the zone cluster configuration.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_onezone",
        "x-onedata-noauth": true,
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The zone cluster configuration.",
            "schema": {
              "$ref": "#/definitions/ZoneConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "put_zone_configuration",
        "summary": "Configure zone deployment",
        "description": "Configures and starts zone services, such as database, cluster manager\nand cluster worker.\n\nThis request can be executed unauthorized as long as there are no admin users.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_onezone",
        "x-onedata-noauth": true,
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "zoneConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ZoneConfiguration"
            },
            "required": true
          }
        ]
      }
    },
    "/zone/databases": {
      "get": {
        "operationId": "get_zone_databases",
        "summary": "Get zone databases status",
        "description": "Returns status of database service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "operationId": "put_zone_databases",
        "summary": "Deploy zone databases",
        "description": "Deploys a database service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceDatabases"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_zone_databases",
        "summary": "Start/stop zone databases",
        "description": "Starts or stops database service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/zone/databases/{host}": {
      "get": {
        "operationId": "get_zone_databases_host",
        "summary": "Get zone database status",
        "description": "Returns status of database service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_zone_databases_host",
        "summary": "Start/stop zone database",
        "description": "Starts or stops database service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/zone/managers": {
      "get": {
        "operationId": "get_zone_managers",
        "summary": "Get zone cluster managers status",
        "description": "Returns status of cluster manager service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "operationId": "put_zone_managers",
        "summary": "Deploy zone cluster managers",
        "description": "Deploys a cluster manager service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "managerHosts",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ManagerHosts"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_zone_managers",
        "summary": "Start/stop zone cluster managers",
        "description": "Starts or stops cluster manager service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/zone/managers/{host}": {
      "get": {
        "operationId": "get_zone_managers_host",
        "summary": "Get zone cluster manager status",
        "description": "Returns status of cluster manager service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_zone_managers_host",
        "summary": "Start/stop zone cluster manager",
        "description": "Starts or stops cluster manager service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/zone/workers": {
      "get": {
        "operationId": "get_zone_workers",
        "summary": "Get zone cluster workers status",
        "description": "Returns status of cluster worker service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        }
      },
      "post": {
        "operationId": "put_zone_workers",
        "summary": "Deploy zone cluster workers",
        "description": "Deploys a cluster worker service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceHosts"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_zone_workers",
        "summary": "Start/stop zone cluster workers",
        "description": "Starts or stops cluster worker service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    },
    "/zone/workers/{host}": {
      "get": {
        "operationId": "get_zone_workers_host",
        "summary": "Get zone cluster worker status",
        "description": "Returns status of cluster worker service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "patch_zone_workers_host",
        "summary": "Start/stop zone cluster worker",
        "description": "Starts or stops cluster worker service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ]
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "description": "The generic error model for REST requests.",
      "properties": {
        "error": {
          "description": "The name of an error type.",
          "type": "string"
        },
        "description": {
          "description": "The detailed error description.",
          "type": "string"
        }
      },
      "required": [
        "error",
        "description"
      ],
      "example": {
        "error": "Invalid Request",
        "description": "User role must be one of 'admin' or 'regular'."
      }
    },
    "UserDetails": {
      "type": "object",
      "description": "The user configuration details.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user ID."
        },
        "userRole": {
          "type": "string",
          "x-onedata-datatype": "atom",
          "description": "The user role, one of `admin` or `regular`.",
          "enum": [
            "admin",
            "regular"
          ]
        }
      },
      "required": [
        "userId",
        "userRole"
      ],
      "example": {
        "userId": "i3h2bp4TjPVuOyvXulbW",
        "userRole": "admin"
      }
    },
    "UserCreateRequest": {
      "type": "object",
      "description": "The user configuration details required for creation process.",
      "properties": {
        "username": {
          "type": "string",
          "description": "The user name. It must be at least 4 characters long and contain only alphanumeric characters [a-zA-Z0-9].\n"
        },
        "password": {
          "type": "string",
          "description": "The user password. It must be at least 8 characters long and contain a minimum of 1 lower case letter [a-z] and a minimum of 1 upper case letter [A-Z] and a minimum of 1 numeric character [0-9]. The Password must not contain a colon character [:].\n"
        },
        "userRole": {
          "type": "string",
          "x-onedata-datatype": "atom",
          "description": "The user role, one of 'admin' or 'regular'.",
          "enum": [
            "admin",
            "regular"
          ]
        }
      },
      "required": [
        "username",
        "password",
        "userRole"
      ],
      "example": {
        "username": "john",
        "password": "P@@$$W0RD",
        "userRole": "admin"
      }
    },
    "UserModifyRequest": {
      "type": "object",
      "description": "The user configuration details that can be modified.",
      "properties": {
        "password": {
          "type": "string",
          "description": "The user password."
        }
      },
      "required": [
        "password"
      ],
      "example": {
        "password": "P@@$$W0RD"
      }
    },
    "PanelConfiguration": {
      "type": "object",
      "description": "The panel configuration.",
      "properties": {
        "users": {
          "type": "object",
          "description": "The collection of user names associated with users properties.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "The user password."
              },
              "userRole": {
                "type": "string",
                "x-onedata-datatype": "atom",
                "description": "The user role, one of 'admin' or 'regular'.",
                "enum": [
                  "admin",
                  "regular"
                ]
              }
            },
            "required": [
              "password",
              "userRole"
            ]
          }
        }
      },
      "required": [
        "users"
      ]
    },
    "ClusterWorkers": {
      "type": "object",
      "description": "The cluster worker service configuration.",
      "properties": {
        "nodes": {
          "type": "array",
          "description": "The list of aliases of cluster worker nodes.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "nodes"
      ]
    },
    "ClusterManagers": {
      "type": "object",
      "description": "The cluster manager service configuration.",
      "properties": {
        "mainNode": {
          "type": "string",
          "description": "The alias of the main cluster manager node."
        },
        "nodes": {
          "type": "array",
          "description": "The list of aliases of cluster manager nodes.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "mainNode",
        "nodes"
      ]
    },
    "ClusterDatabases": {
      "type": "object",
      "description": "The cluster database service configuration.",
      "properties": {
        "nodes": {
          "type": "array",
          "description": "The list of aliases of cluster database nodes.",
          "items": {
            "type": "string"
          }
        },
        "serverQuota": {
          "type": "integer",
          "description": "The server quota is the RAM memory in bytes that is allocated to the server when Couchbase Server is first installed. This sets the limit of RAM allocated by Couchbase for caching data for all buckets and is configured on a per-node basis.\n"
        },
        "bucketQuota": {
          "type": "integer",
          "description": "The bucket quota is the amount of RAM memory in bytes allocated to an individual bucket for caching data.\n"
        }
      },
      "required": [
        "nodes"
      ]
    },
    "ClusterStorages": {
      "type": "object",
      "description": "The cluster storage configuration.",
      "discriminator": "type",
      "x-onedata-oneof": true,
      "x-onedata-subclasses": [
        "posix",
        "s3",
        "ceph",
        "swift"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of storage.",
          "x-discriminator": true,
          "enum": [
            "POSIX",
            "S3",
            "Ceph",
            "Swift"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "ClusterStoragesList": {
      "type": "object",
      "description": "The list of supported storage types.",
      "x-onedata-dictionary": true,
      "x-onedata-dictionary-value-type": "cluster_storages",
      "additionalProperties": {
        "$ref": "#/definitions/ClusterStorages"
      }
    },
    "POSIX": {
      "description": "The POSIX storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterStorages"
        },
        {
          "type": "object",
          "x-discriminator-value": "POSIX",
          "properties": {
            "mountPoint": {
              "type": "string",
              "description": "The absolute path to the directory where the POSIX storage is mounted on the cluster nodes.\n"
            }
          },
          "required": [
            "mountPoint"
          ]
        }
      ],
      "example": {
        "type": "POSIX",
        "mountPoint": "/mnt/nfs"
      }
    },
    "S3": {
      "description": "The Simple Storage Service configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterStorages"
        },
        {
          "type": "object",
          "x-discriminator-value": "S3",
          "properties": {
            "s3Hostname": {
              "type": "string",
              "description": "The hostname of a machine where S3 storage is installed."
            },
            "iamHostname": {
              "type": "string",
              "description": "The IAM hostname for the S3 storage."
            },
            "bucketName": {
              "type": "string",
              "description": "The storage bucket name."
            },
            "accessKey": {
              "type": "string",
              "description": "The access key to the S3 storage."
            },
            "secretKey": {
              "type": "string",
              "description": "The secret key to the S3 storage."
            }
          },
          "required": [
            "s3Hostname",
            "iamHostname",
            "bucketName",
            "accessKey",
            "secretKey"
          ]
        }
      ],
      "example": {
        "type": "S3",
        "s3Hostname": "s3.example.com",
        "iamHostname": "iam.example.com",
        "bucketName": "bucket1.iam.example.com",
        "accessKey": "LKJHLAKJSHD887678678ASDKNJKASD9898789ASD",
        "secretKey": "ASASDLLASD89798&LKJHLAKJSHD887678678ASDKNJK"
      }
    },
    "Ceph": {
      "description": "The Ceph storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterStorages"
        },
        {
          "type": "object",
          "x-discriminator-value": "CEPH",
          "properties": {
            "username": {
              "type": "string",
              "description": "The username for authentication to Ceph cluster."
            },
            "key": {
              "type": "string",
              "description": "The key to access the Ceph cluster."
            },
            "monitorHostname": {
              "type": "string",
              "description": "The monitor host name."
            },
            "clusterName": {
              "type": "string",
              "description": "The Ceph cluster name."
            },
            "poolName": {
              "type": "string",
              "description": "The Ceph pool name."
            }
          },
          "required": [
            "username",
            "key",
            "monitorHostname",
            "clusterName",
            "poolName"
          ]
        }
      ],
      "example": {
        "type": "CEPH",
        "username": "user1",
        "key": "LKJASHD6876ASDBJHV65765ASD",
        "monitorHostname": "test.example.com",
        "clusterName": "CephCluster1",
        "poolName": "data"
      }
    },
    "Swift": {
      "description": "The OpenStack Swift configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/ClusterStorages"
        },
        {
          "type": "object",
          "x-discriminator-value": "SWIFT",
          "properties": {
            "authUrl": {
              "type": "string",
              "description": "The URL to OpenStack Keystone identity service."
            },
            "tenantName": {
              "type": "string",
              "description": "The name of the tenant to which the user belongs."
            },
            "containerName": {
              "type": "string",
              "description": "The name of the Swift storage container."
            },
            "username": {
              "type": "string",
              "description": "The Keystone authentication username."
            },
            "password": {
              "type": "string",
              "description": "The Keystone authentication password."
            }
          },
          "required": [
            "authUrl",
            "tenantName",
            "containerName",
            "username",
            "password"
          ]
        }
      ],
      "example": {
        "type": "SWIFT",
        "authUrl": "http://keystone2.example.com",
        "tenantName": "Project1",
        "containerName": "Container1",
        "username": "user",
        "password": "p@$$w0rd"
      }
    },
    "ZoneConfiguration": {
      "type": "object",
      "description": "The zone deployment configuration.",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ZoneClusterConfiguration"
        },
        "onezone": {
          "type": "object",
          "description": "The zone custom configuration.",
          "properties": {
            "domainName": {
              "description": "The name of a HTTP domain.",
              "type": "string"
            },
            "name": {
              "description": "The name of a zone.",
              "type": "string"
            }
          }
        },
        "onepanel": {
          "$ref": "#/definitions/PanelConfiguration"
        }
      },
      "required": [
        "cluster"
      ],
      "example": {
        "cluster": {
          "domainName": "onezone.onedata.example.com",
          "nodes": {
            "node1": {
              "hostname": "node1"
            }
          },
          "manager": {
            "defaultNode": "node1",
            "nodes": [
              "node1"
            ]
          },
          "worker": {
            "nodes": [
              "node1"
            ]
          },
          "database": {
            "nodes": [
              "node1"
            ]
          }
        },
        "onezone": {
          "name": "example"
        }
      }
    },
    "ZoneClusterConfiguration": {
      "type": "object",
      "description": "The zone cluster configuration.",
      "properties": {
        "autoDeploy": {
          "type": "boolean",
          "description": "Defines whether administrative cluster should be created from the list of provided cluster nodes.\n"
        },
        "domainName": {
          "type": "string",
          "description": "The name of a domain common for all services in the cluster. Together with a node hostname constitute a node fully qualified domain name.\n"
        },
        "nodes": {
          "type": "object",
          "description": "The collection of nodes aliases associated with nodes properties.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "The name of a host."
              }
            },
            "required": [
              "hostname"
            ]
          }
        },
        "databases": {
          "$ref": "#/definitions/ClusterDatabases"
        },
        "managers": {
          "$ref": "#/definitions/ClusterManagers"
        },
        "workers": {
          "$ref": "#/definitions/ClusterWorkers"
        }
      },
      "required": [
        "domainName",
        "nodes",
        "databases",
        "managers",
        "workers"
      ]
    },
    "ProviderConfiguration": {
      "type": "object",
      "description": "The provider deployment configuration.",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ProviderClusterConfiguration"
        },
        "oneprovider": {
          "type": "object",
          "description": "The provider custom configuration.",
          "properties": {
            "register": {
              "type": "boolean",
              "description": "Defines whether the provider should be registered in a zone."
            },
            "name": {
              "type": "string",
              "description": "The name under which the provider will be registered in a zone."
            },
            "redirectionPoint": {
              "type": "string",
              "description": "The address used for user redirection from a zone to the provider."
            },
            "geoLongitude": {
              "type": "number",
              "format": "float",
              "description": "The geographical longitude of the provider."
            },
            "geoLatitude": {
              "type": "number",
              "format": "float",
              "description": "The geographical latitude of the provider."
            }
          },
          "required": [
            "register",
            "name",
            "redirectionPoint"
          ]
        },
        "onezone": {
          "type": "object",
          "description": "The zone custom configuration.",
          "properties": {
            "domainName": {
              "description": "The domain name of a zone where provider will be registered.",
              "type": "string"
            }
          },
          "required": [
            "domainName"
          ]
        },
        "onepanel": {
          "$ref": "#/definitions/PanelConfiguration"
        }
      },
      "required": [
        "cluster"
      ],
      "example": {
        "cluster": {
          "domainName": "oneprovider.onedata.example.com",
          "nodes": {
            "node1": {
              "hostname": "node1"
            }
          },
          "manager": {
            "defaultNode": "node1",
            "nodes": [
              "node1"
            ]
          },
          "worker": {
            "nodes": [
              "node1"
            ]
          },
          "database": {
            "nodes": [
              "node1"
            ]
          },
          "storage": {
            "NFS": {
              "type": "POSIX",
              "mountPoint": "/volumes/storage"
            }
          }
        },
        "oneprovider": {
          "register": true,
          "name": "example",
          "redirectionPoint": "https://node1.oneprovider.onedata.example.com",
          "geoLongitude": -24.3776025,
          "geoLatitude": -128.3519364
        },
        "onezone": {
          "domainName": "node1.onezone.onedata.example.com"
        }
      }
    },
    "ProviderClusterConfiguration": {
      "type": "object",
      "description": "The provider cluster configuration.",
      "properties": {
        "autoDeploy": {
          "type": "boolean",
          "description": "Defines whether administrative cluster should be created from the list of provided cluster nodes.\n"
        },
        "domainName": {
          "type": "string",
          "description": "The name of a domain common for all services in the cluster. Together with a node hostname constitutes a fully qualified domain name (FDQN) of the node.\n"
        },
        "nodes": {
          "type": "object",
          "description": "The collection of nodes aliases associated with nodes properties.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "The name of a host."
              }
            },
            "required": [
              "hostname"
            ]
          }
        },
        "databases": {
          "$ref": "#/definitions/ClusterDatabases"
        },
        "managers": {
          "$ref": "#/definitions/ClusterManagers"
        },
        "workers": {
          "$ref": "#/definitions/ClusterWorkers"
        },
        "storages": {
          "type": "object",
          "description": "The cluster storage configuration.",
          "additionalProperties": {
            "$ref": "#/definitions/ClusterStorages"
          }
        }
      },
      "required": [
        "domainName",
        "nodes",
        "databases",
        "managers",
        "workers"
      ]
    },
    "ProviderDetails": {
      "type": "object",
      "description": "The provider configuration details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID assigned by a zone."
        },
        "name": {
          "type": "string",
          "description": "The name under which the provider has been registered in a zone."
        },
        "urls": {
          "type": "array",
          "description": "The list of IP addresses of provider cluster worker nodes.",
          "items": {
            "type": "string"
          }
        },
        "redirectionPoint": {
          "type": "string",
          "description": "The address used for user redirection from a zone to the provider."
        },
        "geoLongitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical longitude of the provider."
        },
        "geoLatitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical latitude of the provider."
        }
      },
      "required": [
        "id",
        "name",
        "urls",
        "redirectionPoint",
        "geoLongitude",
        "geoLatitude"
      ],
      "example": {
        "id": "VAiDGZbs3k0FD8jPhyU1",
        "name": "Provider1",
        "urls": [
          "192.168.11.23"
        ],
        "redirectionPoint": "https://192.168.11.23",
        "geoLongitude": -24.3776025,
        "geoLatitude": -128.3519364
      }
    },
    "ProviderSpaces": {
      "type": "object",
      "description": "The provider spaces details.",
      "properties": {
        "ids": {
          "type": "array",
          "description": "The list of IDs of spaces supported by a provider.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "ids"
      ],
      "example": {
        "ids": [
          "x7It3cpgNgLZ8RwOrOoW",
          "Q1boCClpCS5mUNhM7YCy"
        ]
      }
    },
    "ProviderRegisterRequest": {
      "type": "object",
      "description": "The provider configuration details required for registration process.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name under which the provider should be registered in a zone."
        },
        "redirectionPoint": {
          "type": "string",
          "description": "The address used for user redirection from a zone to the provider."
        },
        "geoLongitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical longitude of the provider."
        },
        "geoLatitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical latitude of the provider."
        },
        "onezoneDomainName": {
          "type": "string",
          "description": "The domain name of a zone where provider will be registered."
        }
      },
      "required": [
        "name",
        "redirectionPoint"
      ],
      "example": {
        "name": "Provider1",
        "redirectionPoint": "https://192.168.11.23",
        "geoLongitude": -24.3776025,
        "geoLatitude": -128.3519364,
        "onezoneDomainName": "onezone2.example.com"
      }
    },
    "ProviderModifyRequest": {
      "type": "object",
      "description": "The provider configuration details that can be modified.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name under which the provider has been registered in a zone."
        },
        "redirectionPoint": {
          "type": "string",
          "description": "The address used for user redirection from a zone to the provider."
        },
        "geoLongitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical longitude of the provider."
        },
        "geoLatitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical latitude of the provider."
        }
      },
      "example": {
        "name": "Provider1",
        "redirectionPoint": "https://192.168.11.23",
        "geoLongitude": -24.3776025,
        "geoLatitude": -128.3519364
      }
    },
    "ServiceStatus": {
      "type": "object",
      "description": "The generic model for service status.",
      "properties": {
        "hosts": {
          "type": "object",
          "description": "The collection of hosts with associated service status, for each host\nwhere given service has been deployed.\n",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceStatusHost"
          }
        }
      },
      "required": [
        "services"
      ]
    },
    "ServiceStatusHost": {
      "type": "object",
      "description": "The service status.",
      "properties": {
        "status": {
          "type": "string",
          "description": "The service status.",
          "enum": [
            "running",
            "stopped",
            "missing"
          ]
        }
      },
      "required": [
        "status"
      ]
    },
    "ServiceError": {
      "type": "object",
      "description": "The service error model for REST requests.",
      "properties": {
        "error": {
          "description": "The name of an error type.",
          "type": "string"
        },
        "description": {
          "description": "The detailed error description.",
          "type": "string"
        },
        "module": {
          "description": "The name of a module containing function that returned error.",
          "type": "string"
        },
        "function": {
          "description": "The name of a function that returned error.",
          "type": "string"
        },
        "hosts": {
          "type": "object",
          "description": "The collection of hosts with associated error description.",
          "additionalProperties": {
            "description": "The description of an error that has occured on a service host.",
            "$ref": "#/definitions/Error"
          }
        }
      },
      "required": [
        "error",
        "description"
      ]
    },
    "ServiceHosts": {
      "type": "object",
      "description": "The service hosts configuration.",
      "properties": {
        "hosts": {
          "type": "array",
          "description": "The list of hosts where service should be deployed.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "hosts"
      ],
      "example": {
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "ServiceDatabases": {
      "type": "object",
      "description": "The service hosts configuration.",
      "properties": {
        "hosts": {
          "type": "array",
          "description": "The list of hosts where service should be deployed.",
          "items": {
            "type": "string"
          }
        },
        "serverQuota": {
          "type": "integer",
          "description": "The server quota is the RAM memory in bytes that is allocated to the server when Couchbase Server is first installed. This sets the limit of RAM allocated by Couchbase for caching data for all buckets and is configured on a per-node basis.\n"
        },
        "bucketQuota": {
          "type": "integer",
          "description": "The bucket quota is the amount of RAM memory in bytes allocated to an individual bucket for caching data.\n"
        }
      },
      "required": [
        "hosts"
      ],
      "example": {
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "ManagerHosts": {
      "type": "object",
      "description": "The cluster manager service hosts configuration.",
      "properties": {
        "mainHost": {
          "type": "string",
          "description": "The name of a host where main cluster manager node should be deployed. Main cluster manager node is responsible for monitoring cluster worker nodes. Other nodes, called optional, are suspended. In case of main cluster manager node failure one of optional nodes is resumed and takes over main node responsibilities.\n"
        },
        "hosts": {
          "type": "array",
          "description": "The list of hosts where service should be deployed.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "mainHost",
        "hosts"
      ],
      "example": {
        "mainHost": "node1.example.com",
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "TaskStatus": {
      "type": "object",
      "description": "The result of a scheduled operation, e.g. database service configuration.\n",
      "properties": {
        "status": {
          "type": "string",
          "description": "The operation status.",
          "enum": [
            "ok",
            "error",
            "running"
          ]
        },
        "steps": {
          "type": "array",
          "description": "The list of operation steps that have been executed successfully.",
          "items": {
            "type": "string"
          }
        },
        "error": {
          "description": "The name of an error type.",
          "type": "string"
        },
        "description": {
          "description": "The detailed error description.",
          "type": "string"
        },
        "module": {
          "description": "The name of a module containing function that returned error.",
          "type": "string"
        },
        "function": {
          "description": "The name of a function that returned error.",
          "type": "string"
        },
        "hosts": {
          "type": "object",
          "description": "The collection of hosts with associated error description.",
          "additionalProperties": {
            "description": "The description of an error that has occured on a service host.",
            "$ref": "#/definitions/Error"
          }
        }
      },
      "required": [
        "status",
        "steps"
      ],
      "example": {
        "status": "running",
        "steps": [
          "configuring"
        ]
      }
    },
    "SpaceDetails": {
      "type": "object",
      "description": "The space details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the space."
        },
        "name": {
          "type": "string",
          "description": "The name of the space."
        },
        "supportingProviders": {
          "type": "object",
          "description": "The collection of provider IDs with associated supported storage space in bytes.\n",
          "additionalProperties": {
            "type": "integer",
            "description": "Supported storage space in bytes."
          }
        }
      },
      "required": [
        "spaceId",
        "name",
        "supportingProviders"
      ]
    },
    "SpaceSupportRequest": {
      "type": "object",
      "description": "The configuration details required to create or support a space by a provider.\n",
      "properties": {
        "name": {
          "type": "string",
          "description": "The space name. If this property is provided and space with given name will be created and automatically supported by a provider.\n"
        },
        "token": {
          "type": "string",
          "description": "The token for space creation or support."
        },
        "size": {
          "type": "integer",
          "description": "The storage space size in bytes that provider is willing to assign to the space.\n"
        },
        "storageName": {
          "type": "string",
          "description": "The user defined name of the storage resource, where the space data should be stored. To be used interchangeably with `storageId`.\n"
        },
        "storageId": {
          "type": "string",
          "description": "The ID of the storage resource where the space data should be stored. To be used interchangeably with `storageName`.\n"
        }
      },
      "required": [
        "token",
        "size"
      ],
      "example": {
        "name": "MySpace1",
        "token": "ASDJNASD87687ASDMNBMNASD87786asd",
        "size": 1024000
      }
    }
  },
  "tags": [
    {
      "name": "Onepanel",
      "description": "Common Onepanel resources and operations"
    },
    {
      "name": "Oneprovider",
      "description": "Resources and operations for managing Oneprovider deployment"
    },
    {
      "name": "Onezone",
      "description": "Resources and operations for managing Onezone deployment"
    }
  ],
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  }
}
